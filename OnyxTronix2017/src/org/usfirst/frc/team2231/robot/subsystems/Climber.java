// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc.team2231.robot.subsystems;

import OnyxTronix.OnyxTronixPIDController;

import org.usfirst.frc.team2231.robot.Robot;
import org.usfirst.frc.team2231.robot.RobotMap;
import org.usfirst.frc.team2231.robot.commands.ClimbRope;

import com.ctre.CANTalon;
import com.ctre.CANTalon.TalonControlMode;

import edu.wpi.first.wpilibj.ADXRS450_Gyro;
import edu.wpi.first.wpilibj.PIDController;
import edu.wpi.first.wpilibj.command.Subsystem;


/**
 *
 */
public class Climber extends Subsystem {
	public static final double PID_P = 0.5;
	public static final double PID_I = 0;
	public static final double PID_D = 0;
	public static final double PID_F = 0;
	public static final double SETPOINT_ANGLE = 90;
	public static final double PID_TOLERNCE = 0.2;
	public static final double OUTPUT_RANGE = 1;
	private static final double MOTOR_SPEED = 1000;
    private static final double SENSITIVITY_VALUE = 0.2;
    
    private final CANTalon motor = RobotMap.climberMotor;
    private final ADXRS450_Gyro gyro = RobotMap.gyro;
    private final OnyxTronixPIDController PIDController= RobotMap.climberPIDContoller;
    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public void initDefaultCommand() {
        setDefaultCommand(new ClimbRope());
        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }
    public void climbRope() {
    	if(Math.abs(Robot.oi.getButtonStick().getRawAxis(1)) > SENSITIVITY_VALUE){
    		motor.set(Robot.oi.getButtonStick().getRawAxis(1));
    	} else {
    		motor.set(0);
    	}
    }
    public boolean isOnAngle(double angle) {
    	return gyro.getAngle() == angle;	
    }
    
    public void initPID(double setPoint) {
    	PIDController.init(setPoint, PID_TOLERNCE);
    }
    
    public void disablePID() {
    	PIDController.stop();
    }
    
    public double getSetPointByRobotAngle() {
    	return MOTOR_SPEED / SETPOINT_ANGLE * (SETPOINT_ANGLE - gyro.getAngle());
    }
    
	public void resetGyro() {
		gyro.reset();
	}
	
	public void setPIDSetpoint(double setpoint) {
		PIDController.setSetpoint(setpoint);
	}
}

