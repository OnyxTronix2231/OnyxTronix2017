// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc.team2231.robot.subsystems;

import onyxNiVision.OnyxTronixPIDController;

import org.usfirst.frc.team2231.robot.RobotMap;
import org.usfirst.frc.team2231.robot.StaticFields;
import org.usfirst.frc.team2231.robot.commands.DriveByJoystick;

import com.ctre.CANTalon;
import com.ctre.CANTalon.TalonControlMode;

import edu.wpi.first.wpilibj.DoubleSolenoid;
import edu.wpi.first.wpilibj.DoubleSolenoid.Value;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.PIDSourceType;
import edu.wpi.first.wpilibj.RobotDrive;
import edu.wpi.first.wpilibj.command.Subsystem;


/**
 *
 */
public class DriveTrain extends Subsystem {
    private final CANTalon firstLeft = RobotMap.driveTrainFirstLeft;
    private final CANTalon secondLeft = RobotMap.driveTrainSecondLeft;
    private final CANTalon firstRight = RobotMap.driveTrainFirstRight;
    private final CANTalon secondRight = RobotMap.driveTrainSecondRight;
    private final RobotDrive robotDrive = RobotMap.driveTrainRobotDrive;
    private final DoubleSolenoid shifterRight = RobotMap.driveTrainShifterRight;
    private final DoubleSolenoid shifterLeft = RobotMap.driveTrainShifterLeft;
    private final OnyxTronixPIDController pidController = RobotMap.driveTrainPIDController;
    
    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public void initDefaultCommand() {
        setDefaultCommand(new DriveByJoystick());
        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }
    
    public void arcadeDrive(Joystick stick){
    	robotDrive.arcadeDrive(-stick.getRawAxis(1), stick.getRawAxis(4));
    }
    public void closeShifters() {
    	RobotMap.driveTrainShifterLeft.set(Value.kReverse);
    	RobotMap.driveTrainShifterRight.set(Value.kReverse);
    }
    public void openShifters() {
    	RobotMap.driveTrainShifterLeft.set(Value.kForward);
    	RobotMap.driveTrainShifterRight.set(Value.kForward);
    }
    public void driveByPID(double setPoint) {
    	pidController.init(setPoint, StaticFields.driveAbsoluteTolerance);
    }
    public void changeToFollower() {
    	firstRight.changeControlMode(TalonControlMode.Follower);
    	secondRight.changeControlMode(TalonControlMode.Follower);
    	secondLeft.changeControlMode(TalonControlMode.Follower);
    	firstRight.set(firstLeft.getDeviceID());
    	secondRight.set(firstLeft.getDeviceID());
    	secondLeft.set(firstLeft.getDeviceID());
    }
    public void resetControlType() {
    	firstLeft.changeControlMode(TalonControlMode.PercentVbus);
    	firstRight.changeControlMode(TalonControlMode.PercentVbus);
    	secondRight.changeControlMode(TalonControlMode.PercentVbus);
    	secondLeft.changeControlMode(TalonControlMode.PercentVbus);
    }
    public boolean isOnTarget() {
    	return RobotMap.driveTrainPIDController.onTarget();
    }
    public void stopPID() {
    	pidController.stop();
    }
    public void changePIDTypeToSpeed() {
    	firstLeft.setPIDSourceType(PIDSourceType.kDisplacement);
	}
}

