// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package org.usfirst.frc.team2231.robot.subsystems;

import org.usfirst.frc.team2231.robot.Robot;
import org.usfirst.frc.team2231.robot.RobotMap;
import org.usfirst.frc.team2231.robot.StaticFields;
import com.ctre.CANTalon;
import com.ctre.CANTalon.TalonControlMode;
import OnyxTronix.OnyxTronixPIDController;
import edu.wpi.first.wpilibj.PIDSourceType;
import edu.wpi.first.wpilibj.command.Subsystem;

/**
 *
 */
public class Shooter extends Subsystem {
	public static final double SPEED = 1;
	public static double PID_SET_POINT = 10000;
	public static final double PID_P = 0.000001;
	public static final double PID_I = 0;
	public static final double PID_D = 0;
	public static final double PID_F = 0;
	public static final double ABSOLUTE_TOLERANCE = 150;
	public boolean isShooting = false;
	
    private final CANTalon upperWheel = RobotMap.shooterUpperWheel;
    private final CANTalon lowerWheel = RobotMap.shooterLowerWheel;
    private final OnyxTronixPIDController PIDController = RobotMap.shooterPIDController;

	public void initDefaultCommand() {
		// Set the default command for a subsystem here.
		// setDefaultCommand(new MySpecialCommand());
	}
	
	public void startShoot() {
		upperWheel.set(SPEED);
		lowerWheel.set(SPEED);
	}
	
	public void stopShoot() {
		upperWheel.set(0);
		lowerWheel.set(0);
	}
	
	public void setSlaveTalon() {
		upperWheel.changeControlMode(TalonControlMode.Follower);
		upperWheel.set(lowerWheel.getDeviceID());
	}
	
	public void initPIDController() {
		PIDController.init(PID_SET_POINT, ABSOLUTE_TOLERANCE);
	}
	
	public void disablePIDContoller() {
		PIDController.stop();
	}
	
	public void resetSlaveTalon() {
		lowerWheel.changeControlMode(TalonControlMode.PercentVbus);
	}
	
	public void setPIDSourceType(PIDSourceType PIDSourceType) {
		lowerWheel.setPIDSourceType(PIDSourceType);
	}
	
	public boolean isReady(){
		return PIDController.isEnabled() && PIDController.onTarget();
	}
	
	public void stopPID() {
		disablePIDContoller();
    	resetSlaveTalon();
	}
	
	public void startPID() {
		setSlaveTalon();
		setPIDSourceType(PIDSourceType.kRate);
    	initPIDController();
	}
}
