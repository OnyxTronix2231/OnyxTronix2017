// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package org.usfirst.frc.team2231.robot.subsystems;

import org.usfirst.frc.team2231.robot.Robot;
import org.usfirst.frc.team2231.robot.RobotMap;
import org.usfirst.frc.team2231.robot.StaticFields;
import org.usfirst.frc.team2231.robot.commands.*;

import com.ctre.CANTalon;
import com.ctre.CANTalon.TalonControlMode;

import edu.wpi.first.wpilibj.CANSpeedController.ControlMode;
import edu.wpi.first.wpilibj.PIDSourceType;
import edu.wpi.first.wpilibj.command.Subsystem;
import onyxNiVision.OnyxTronixPIDController;

/**
 *
 */
public class Shooter extends Subsystem {

	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final CANTalon upperWheel = RobotMap.shooterUpperWheel;
    private final CANTalon lowerWheel = RobotMap.shooterLowerWheel;
    private final OnyxTronixPIDController PIDController = RobotMap.shooterPIDController;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

	// Put methods for controlling this subsystem
	// here. Call these from Commands.

	public void initDefaultCommand() {
		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

		// Set the default command for a subsystem here.
		// setDefaultCommand(new MySpecialCommand());
	}
	
	public void startShoot() {
		upperWheel.set(StaticFields.SHOOTER_SPEED);
		lowerWheel.set(StaticFields.SHOOTER_SPEED);
	}
	
	public boolean isShooting() {
		return (upperWheel.get() == 0) && (lowerWheel.get() == 0);
	}
	
	public void changeShooterTalonToFollow() {
		lowerWheel.changeControlMode(TalonControlMode.Follower);
		lowerWheel.set(upperWheel.getDeviceID());
	}
	
	public void shooterPIDInit(double m_setPoint) {
		upperWheel.setPIDSourceType(PIDSourceType.kRate);
		PIDController.init(m_setPoint, 5);
	}
	
	public void disablePIDController() {
		PIDController.stop();
	}
	
	public void resetTalonControl() {
		lowerWheel.changeControlMode(TalonControlMode.PercentVbus);
	}
}
