// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc.team2231.robot;

import org.usfirst.frc.team2231.robot.commands.AutonomousCommand;
import org.usfirst.frc.team2231.robot.subsystems.Climber;
import org.usfirst.frc.team2231.robot.subsystems.Collector;
import org.usfirst.frc.team2231.robot.subsystems.DriveTrain;
import org.usfirst.frc.team2231.robot.subsystems.GearBlocker;
import org.usfirst.frc.team2231.robot.subsystems.GearHolder;
import org.usfirst.frc.team2231.robot.subsystems.Shooter;
import org.usfirst.frc.team2231.robot.subsystems.Trigger;

import OnyxTronix.Debug;
import edu.wpi.first.wpilibj.IterativeRobot;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.command.Scheduler;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

/**
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to each mode, as described in the IterativeRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the manifest file in the resource
 * directory.
 */
public class Robot extends IterativeRobot {

    Command autonomousCommand;

    public static OI oi;
    public static GearBlocker gearBlocker;
    public static DriveTrain driveTrain;
    public static Collector collector;
    public static Climber climber;
    public static GearHolder gearHolder;
    public static Shooter shooter;
    public static Trigger trigger;
    /**
     * This function is run when the robot is first started up and should be
     * used for any initialization code.
     */
    public void robotInit() {
    	RobotMap.init();
    	
        gearBlocker = new GearBlocker();
        driveTrain = new DriveTrain();
        collector = new Collector();
        climber = new Climber();
        gearHolder = new GearHolder();
        shooter = new Shooter();
        trigger = new Trigger();

        // OI must be constructed after subsystems. If the OI creates Commands
        //(which it very likely will), subsystems are not guaranteed to be
        // constructed yet. Thus, their requires() statements may grab null
        // pointers. Bad news. Don't move it.
        oi = new OI();

        // instantiate the command used for the autonomous period
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS

        autonomousCommand = new AutonomousCommand();

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS
        
        SmartDashboard.putNumber("Shooter PID P", Shooter.PID_P);
        SmartDashboard.putNumber("Shooter PID I", Shooter.PID_I);
        SmartDashboard.putNumber("Shooter PID D", Shooter.PID_D);   
        SmartDashboard.putNumber("Shooter PID F", Shooter.PID_F);   
        SmartDashboard.putNumber("Shooter PID Setpoint", Shooter.PID_SET_POINT);   
    }

    /**
     * This function is called when the disabled button is hit.
     * You can use it to reset subsystems before shutting down.
     */
    public void disabledInit(){

    }

    public void disabledPeriodic() {
        Scheduler.getInstance().run();
    }

    public void autonomousInit() {
        // schedule the autonomous command (example)
        if (autonomousCommand != null) autonomousCommand.start();
    }

    /**
     * This function is called periodically during autonomous
     */
    public void autonomousPeriodic() {
        Scheduler.getInstance().run();
    }

    double p, i, d, f, sp;
    public void teleopInit() {
        // This makes sure that the autonomous stops running when
        // teleop starts running. If you want the autonomous to
        // continue until interrupted by another command, remove
        // this line or comment it out.
        if (autonomousCommand != null) autonomousCommand.cancel();
        
        p = SmartDashboard.getNumber("Shooter PID P", 0);
        i = SmartDashboard.getNumber("Shooter PID I", 0);
        d = SmartDashboard.getNumber("Shooter PID D", 0);
        f = SmartDashboard.getNumber("Shooter PID F", 0);
        sp = SmartDashboard.getNumber("Shooter PID Setpoint", 0);

        RobotMap.shooterPIDController.setPID(p, i, d, f);
        Shooter.PID_SET_POINT = sp;
        
    }

    /**
     * This function is called periodically during operator control
     */
    public void teleopPeriodic() {
        Scheduler.getInstance().run();
    }

    /**
     * This function is called periodically during test mode
     */
    public void testPeriodic() {
        LiveWindow.run();
    }
}
