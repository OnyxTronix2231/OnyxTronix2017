// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package org.usfirst.frc.team2231.robot;

import org.usfirst.frc.team2231.robot.Buttons.Button;
import org.usfirst.frc.team2231.robot.commands.AutonomousCommand;
import org.usfirst.frc.team2231.robot.commands.AutonomousGearDeliver;
import org.usfirst.frc.team2231.robot.commands.AutonomousRightGearDeliver;
import org.usfirst.frc.team2231.robot.commands.CenterByVision;
import org.usfirst.frc.team2231.robot.commands.CloseGearBlocker;
import org.usfirst.frc.team2231.robot.commands.CloseGearHolder;
import org.usfirst.frc.team2231.robot.commands.RotateByAngle;
import org.usfirst.frc.team2231.robot.commands.SwitchToStrengthGear;
import org.usfirst.frc.team2231.robot.commands.CollectBalls;
import org.usfirst.frc.team2231.robot.commands.DriveAutoDisabler;
import org.usfirst.frc.team2231.robot.commands.DriveByDistance;
import org.usfirst.frc.team2231.robot.commands.DriveByJoystick;
import org.usfirst.frc.team2231.robot.commands.StartTrigger;
import org.usfirst.frc.team2231.robot.commands.OpenGearBlocker;
import org.usfirst.frc.team2231.robot.commands.OpenGearHolder;
import org.usfirst.frc.team2231.robot.commands.Shoot;
import org.usfirst.frc.team2231.robot.commands.SwitchToSpeedGear;
import org.usfirst.frc.team2231.robot.commands.TeleopGearDeliver;
import org.usfirst.frc.team2231.robot.commands.ToggleGearBlocker;
import org.usfirst.frc.team2231.robot.commands.ToggleGearHolder;

import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.buttons.JoystickButton;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;


/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {
    //// CREATING BUTTONS
    // One type of button is a joystick button which is any button on a joystick.
    // You create one by telling it which joystick it's on and which button
    // number it is.
    // Joystick stick = new Joystick(port);
    // Button button = new JoystickButton(stick, buttonNumber);

    // There are a few additional built in buttons you can use. Additionally,
    // by subclassing Button you can create custom triggers and bind those to
    // commands the same as any other Button.

    //// TRIGGERING COMMANDS WITH BUTTONS
    // Once you have a button, it's trivial to bind it to a button in one of
    // three ways:

    // Start the command when the button is pressed and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenPressed(new ExampleCommand());

    // Run the command while the button is being held down and interrupt it once
    // the button is released.
    // button.whileHeld(new ExampleCommand());

    // Start the command when the button is released  and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenReleased(new ExampleCommand());


    public JoystickButton collectBalls;
    public JoystickButton toggleGearHold;
    public JoystickButton openGearBlocker;
    public JoystickButton closeGearBlocker;
    public JoystickButton shoot;
    public JoystickButton load;
    public JoystickButton test;
    public Joystick buttonStick;
    public JoystickButton rotateByAngle;
    public JoystickButton openShifters;
    public JoystickButton closeShifters;
    public JoystickButton driveByDistance;
    public Joystick driveStick;
    public JoystickButton boilerCenterByVision;
    public JoystickButton liftCenterByVision;
    public JoystickButton boilerDriveByVision;
    public JoystickButton liftDriveByVision;
    public JoystickButton driveAutoDisabler;
    public JoystickButton deliverGear;
    
    public OI() {
        driveStick = new Joystick(1);
        
        closeShifters = new JoystickButton(driveStick, Button.Start.value());
        closeShifters.whenPressed(new SwitchToStrengthGear());
        openShifters = new JoystickButton(driveStick, Button.Back.value());
        openShifters.whenPressed(new SwitchToSpeedGear());
        deliverGear = new JoystickButton(driveStick, Button.A.value());
        deliverGear.whenPressed(new TeleopGearDeliver());
//        boilerDriveByVision = new JoystickButton(driveStick, Button.X.value());
//        boilerDriveByVision.whenPressed(new DriveToTargetByVision(1, RobotMap.gripBoilerConfig));
//        liftDriveByVision = new JoystickButton(driveStick, Button.B.value());
//        liftDriveByVision.whenPressed(new DriveToTargetByVision(1, RobotMap.gripLiftConfig));
       /* driveByDistance = new JoystickButton(driveStick, Button.Y.value());
        driveByDistance.whenPressed(new RotateByAngle(90));*/
//        rotateByAngle = new JoystickButton(driveStick, Button.B.value());
//        rotateByAngle.whenPressed(new RotateByAngle(180));
//        driveAutoDisabler = new JoystickButton(driveStick, Button.A.value());
//        driveAutoDisabler.whenPressed(new DriveAutoDisabler());
        driveAutoDisabler = new JoystickButton(driveStick, Button.X.value());
        driveAutoDisabler.whenPressed(new AutonomousRightGearDeliver());
        
      rotateByAngle = new JoystickButton(driveStick, Button.B.value());
      rotateByAngle.whenPressed(new CenterByVision(0, RobotMap.gripLiftConfig));
        
        buttonStick = new Joystick(0);
        
        collectBalls = new JoystickButton(buttonStick, Button.A.value());
        collectBalls.whileHeld(new CollectBalls(1));
        toggleGearHold = new JoystickButton(buttonStick, Button.Y.value());
        toggleGearHold.whenPressed(new ToggleGearHolder());
        load = new JoystickButton(buttonStick, Button.RB.value());
        load.whileHeld(new StartTrigger(1));
        shoot = new JoystickButton(buttonStick, Button.LB.value());
        shoot.whileHeld(new Shoot());
        openGearBlocker = new JoystickButton(buttonStick, Button.X.value());
        openGearBlocker.whenPressed(new OpenGearBlocker());
        closeGearBlocker = new JoystickButton(buttonStick, Button.B.value());
        closeGearBlocker.whenPressed(new CloseGearBlocker());
        


        // SmartDashboard Buttons
        SmartDashboard.putData("Autonomous Command", new AutonomousCommand());
        SmartDashboard.putData("DriveByJoystick", new DriveByJoystick());
        SmartDashboard.putData("OpenShifters", new SwitchToSpeedGear());
        SmartDashboard.putData("CloseShifters", new SwitchToStrengthGear());
        SmartDashboard.putData("OpenGearHolderPiston", new OpenGearHolder());
        SmartDashboard.putData("CloseGearHolderPiston", new CloseGearHolder());
        SmartDashboard.putData("OpenGearBlockerPiston", new OpenGearBlocker());
        SmartDashboard.putData("CloseGearBlockerPiston", new CloseGearBlocker());
    }

    public Joystick getButtonStick() {
        return buttonStick;
    }

    public Joystick getDriveStick() {
        return driveStick;
    }
}

